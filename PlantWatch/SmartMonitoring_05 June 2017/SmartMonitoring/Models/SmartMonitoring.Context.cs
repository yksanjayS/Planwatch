//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SmartMonitoring.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class SmartMonitoringEntities : DbContext
    {
        public SmartMonitoringEntities()
            : base("name=SmartMonitoringEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<tblArea> tblAreas { get; set; }
        public virtual DbSet<tblLogin> tblLogins { get; set; }
        public virtual DbSet<tblMachine> tblMachines { get; set; }
        public virtual DbSet<tblPlant> tblPlants { get; set; }
        public virtual DbSet<tblPoint> tblPoints { get; set; }
        public virtual DbSet<tblSensor> tblSensors { get; set; }
        public virtual DbSet<tblTrain> tblTrains { get; set; }
        public virtual DbSet<tblUserRegister> tblUserRegisters { get; set; }
        public virtual DbSet<UserProfile> UserProfiles { get; set; }
        public virtual DbSet<webpages_Membership> webpages_Membership { get; set; }
        public virtual DbSet<webpages_OAuthMembership> webpages_OAuthMembership { get; set; }
        public virtual DbSet<webpages_Roles> webpages_Roles { get; set; }
        public virtual DbSet<tblMeasurementSetup> tblMeasurementSetups { get; set; }
        public virtual DbSet<tblPlantMaster> tblPlantMasters { get; set; }
        public virtual DbSet<tblRecordData> tblRecordDatas { get; set; }
        public virtual DbSet<tblAlarmsData> tblAlarmsDatas { get; set; }
        public virtual DbSet<tblOveralldata> tblOveralldatas { get; set; }
        public virtual DbSet<tblRecordedData> tblRecordedDatas { get; set; }
    
        public virtual int AddArea(string action, string userID, string areaID, string areaName, string areaDetail, Nullable<int> numberOfTrains, string userRole, string parentID)
        {
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            var userIDParameter = userID != null ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(string));
    
            var areaIDParameter = areaID != null ?
                new ObjectParameter("AreaID", areaID) :
                new ObjectParameter("AreaID", typeof(string));
    
            var areaNameParameter = areaName != null ?
                new ObjectParameter("AreaName", areaName) :
                new ObjectParameter("AreaName", typeof(string));
    
            var areaDetailParameter = areaDetail != null ?
                new ObjectParameter("AreaDetail", areaDetail) :
                new ObjectParameter("AreaDetail", typeof(string));
    
            var numberOfTrainsParameter = numberOfTrains.HasValue ?
                new ObjectParameter("NumberOfTrains", numberOfTrains) :
                new ObjectParameter("NumberOfTrains", typeof(int));
    
            var userRoleParameter = userRole != null ?
                new ObjectParameter("UserRole", userRole) :
                new ObjectParameter("UserRole", typeof(string));
    
            var parentIDParameter = parentID != null ?
                new ObjectParameter("ParentID", parentID) :
                new ObjectParameter("ParentID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddArea", actionParameter, userIDParameter, areaIDParameter, areaNameParameter, areaDetailParameter, numberOfTrainsParameter, userRoleParameter, parentIDParameter);
        }
    
        public virtual int AddMachine(string action, string userID, string machineID, string machineName, string machineDetails, Nullable<int> rPMDriven, Nullable<int> pulseRevolution, string machineImages, string userRole, string parentID)
        {
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            var userIDParameter = userID != null ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(string));
    
            var machineIDParameter = machineID != null ?
                new ObjectParameter("MachineID", machineID) :
                new ObjectParameter("MachineID", typeof(string));
    
            var machineNameParameter = machineName != null ?
                new ObjectParameter("MachineName", machineName) :
                new ObjectParameter("MachineName", typeof(string));
    
            var machineDetailsParameter = machineDetails != null ?
                new ObjectParameter("MachineDetails", machineDetails) :
                new ObjectParameter("MachineDetails", typeof(string));
    
            var rPMDrivenParameter = rPMDriven.HasValue ?
                new ObjectParameter("RPMDriven", rPMDriven) :
                new ObjectParameter("RPMDriven", typeof(int));
    
            var pulseRevolutionParameter = pulseRevolution.HasValue ?
                new ObjectParameter("PulseRevolution", pulseRevolution) :
                new ObjectParameter("PulseRevolution", typeof(int));
    
            var machineImagesParameter = machineImages != null ?
                new ObjectParameter("MachineImages", machineImages) :
                new ObjectParameter("MachineImages", typeof(string));
    
            var userRoleParameter = userRole != null ?
                new ObjectParameter("UserRole", userRole) :
                new ObjectParameter("UserRole", typeof(string));
    
            var parentIDParameter = parentID != null ?
                new ObjectParameter("ParentID", parentID) :
                new ObjectParameter("ParentID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddMachine", actionParameter, userIDParameter, machineIDParameter, machineNameParameter, machineDetailsParameter, rPMDrivenParameter, pulseRevolutionParameter, machineImagesParameter, userRoleParameter, parentIDParameter);
        }
    
        public virtual int AddPlant(string action, string userID, string plantID, string plantName, string address, string contactNo, string faxNo, string website, string plantDetail, Nullable<int> noOfArea, string userRole)
        {
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            var userIDParameter = userID != null ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(string));
    
            var plantIDParameter = plantID != null ?
                new ObjectParameter("PlantID", plantID) :
                new ObjectParameter("PlantID", typeof(string));
    
            var plantNameParameter = plantName != null ?
                new ObjectParameter("PlantName", plantName) :
                new ObjectParameter("PlantName", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var contactNoParameter = contactNo != null ?
                new ObjectParameter("ContactNo", contactNo) :
                new ObjectParameter("ContactNo", typeof(string));
    
            var faxNoParameter = faxNo != null ?
                new ObjectParameter("FaxNo", faxNo) :
                new ObjectParameter("FaxNo", typeof(string));
    
            var websiteParameter = website != null ?
                new ObjectParameter("Website", website) :
                new ObjectParameter("Website", typeof(string));
    
            var plantDetailParameter = plantDetail != null ?
                new ObjectParameter("PlantDetail", plantDetail) :
                new ObjectParameter("PlantDetail", typeof(string));
    
            var noOfAreaParameter = noOfArea.HasValue ?
                new ObjectParameter("NoOfArea", noOfArea) :
                new ObjectParameter("NoOfArea", typeof(int));
    
            var userRoleParameter = userRole != null ?
                new ObjectParameter("UserRole", userRole) :
                new ObjectParameter("UserRole", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddPlant", actionParameter, userIDParameter, plantIDParameter, plantNameParameter, addressParameter, contactNoParameter, faxNoParameter, websiteParameter, plantDetailParameter, noOfAreaParameter, userRoleParameter);
        }
    
        public virtual int AddPoint(string action, string userID, string pointID, string pointName, string pointDetail, Nullable<int> noOfSensors, string userRole, string parentID)
        {
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            var userIDParameter = userID != null ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(string));
    
            var pointIDParameter = pointID != null ?
                new ObjectParameter("PointID", pointID) :
                new ObjectParameter("PointID", typeof(string));
    
            var pointNameParameter = pointName != null ?
                new ObjectParameter("PointName", pointName) :
                new ObjectParameter("PointName", typeof(string));
    
            var pointDetailParameter = pointDetail != null ?
                new ObjectParameter("PointDetail", pointDetail) :
                new ObjectParameter("PointDetail", typeof(string));
    
            var noOfSensorsParameter = noOfSensors.HasValue ?
                new ObjectParameter("NoOfSensors", noOfSensors) :
                new ObjectParameter("NoOfSensors", typeof(int));
    
            var userRoleParameter = userRole != null ?
                new ObjectParameter("UserRole", userRole) :
                new ObjectParameter("UserRole", typeof(string));
    
            var parentIDParameter = parentID != null ?
                new ObjectParameter("ParentID", parentID) :
                new ObjectParameter("ParentID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddPoint", actionParameter, userIDParameter, pointIDParameter, pointNameParameter, pointDetailParameter, noOfSensorsParameter, userRoleParameter, parentIDParameter);
        }
    
        public virtual int AddSensor(string action, string userID, string sensorID, string sensorName, string sensorDirection, string sensorType, string acquisitionID, string userRole)
        {
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            var userIDParameter = userID != null ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(string));
    
            var sensorIDParameter = sensorID != null ?
                new ObjectParameter("SensorID", sensorID) :
                new ObjectParameter("SensorID", typeof(string));
    
            var sensorNameParameter = sensorName != null ?
                new ObjectParameter("SensorName", sensorName) :
                new ObjectParameter("SensorName", typeof(string));
    
            var sensorDirectionParameter = sensorDirection != null ?
                new ObjectParameter("SensorDirection", sensorDirection) :
                new ObjectParameter("SensorDirection", typeof(string));
    
            var sensorTypeParameter = sensorType != null ?
                new ObjectParameter("SensorType", sensorType) :
                new ObjectParameter("SensorType", typeof(string));
    
            var acquisitionIDParameter = acquisitionID != null ?
                new ObjectParameter("AcquisitionID", acquisitionID) :
                new ObjectParameter("AcquisitionID", typeof(string));
    
            var userRoleParameter = userRole != null ?
                new ObjectParameter("UserRole", userRole) :
                new ObjectParameter("UserRole", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddSensor", actionParameter, userIDParameter, sensorIDParameter, sensorNameParameter, sensorDirectionParameter, sensorTypeParameter, acquisitionIDParameter, userRoleParameter);
        }
    
        public virtual int AddTrain(string action, string userID, string trainID, string trainName, Nullable<int> numberOfMachines, string driveUnitName, string intermediateUnitName, string drivenUnitName, string userRole, string parentID)
        {
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            var userIDParameter = userID != null ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(string));
    
            var trainIDParameter = trainID != null ?
                new ObjectParameter("TrainID", trainID) :
                new ObjectParameter("TrainID", typeof(string));
    
            var trainNameParameter = trainName != null ?
                new ObjectParameter("TrainName", trainName) :
                new ObjectParameter("TrainName", typeof(string));
    
            var numberOfMachinesParameter = numberOfMachines.HasValue ?
                new ObjectParameter("NumberOfMachines", numberOfMachines) :
                new ObjectParameter("NumberOfMachines", typeof(int));
    
            var driveUnitNameParameter = driveUnitName != null ?
                new ObjectParameter("DriveUnitName", driveUnitName) :
                new ObjectParameter("DriveUnitName", typeof(string));
    
            var intermediateUnitNameParameter = intermediateUnitName != null ?
                new ObjectParameter("IntermediateUnitName", intermediateUnitName) :
                new ObjectParameter("IntermediateUnitName", typeof(string));
    
            var drivenUnitNameParameter = drivenUnitName != null ?
                new ObjectParameter("DrivenUnitName", drivenUnitName) :
                new ObjectParameter("DrivenUnitName", typeof(string));
    
            var userRoleParameter = userRole != null ?
                new ObjectParameter("UserRole", userRole) :
                new ObjectParameter("UserRole", typeof(string));
    
            var parentIDParameter = parentID != null ?
                new ObjectParameter("ParentID", parentID) :
                new ObjectParameter("ParentID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddTrain", actionParameter, userIDParameter, trainIDParameter, trainNameParameter, numberOfMachinesParameter, driveUnitNameParameter, intermediateUnitNameParameter, drivenUnitNameParameter, userRoleParameter, parentIDParameter);
        }
    
        public virtual int AddUser(string firstName, string lastName, string middleName, string loginID, string password, string userrole, string phoneNo, string faxNo, string companyname, string designation, string department, string emailID, Nullable<bool> userStatus)
        {
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var middleNameParameter = middleName != null ?
                new ObjectParameter("MiddleName", middleName) :
                new ObjectParameter("MiddleName", typeof(string));
    
            var loginIDParameter = loginID != null ?
                new ObjectParameter("LoginID", loginID) :
                new ObjectParameter("LoginID", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var userroleParameter = userrole != null ?
                new ObjectParameter("Userrole", userrole) :
                new ObjectParameter("Userrole", typeof(string));
    
            var phoneNoParameter = phoneNo != null ?
                new ObjectParameter("PhoneNo", phoneNo) :
                new ObjectParameter("PhoneNo", typeof(string));
    
            var faxNoParameter = faxNo != null ?
                new ObjectParameter("FaxNo", faxNo) :
                new ObjectParameter("FaxNo", typeof(string));
    
            var companynameParameter = companyname != null ?
                new ObjectParameter("Companyname", companyname) :
                new ObjectParameter("Companyname", typeof(string));
    
            var designationParameter = designation != null ?
                new ObjectParameter("Designation", designation) :
                new ObjectParameter("Designation", typeof(string));
    
            var departmentParameter = department != null ?
                new ObjectParameter("Department", department) :
                new ObjectParameter("Department", typeof(string));
    
            var emailIDParameter = emailID != null ?
                new ObjectParameter("EmailID", emailID) :
                new ObjectParameter("EmailID", typeof(string));
    
            var userStatusParameter = userStatus.HasValue ?
                new ObjectParameter("UserStatus", userStatus) :
                new ObjectParameter("UserStatus", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddUser", firstNameParameter, lastNameParameter, middleNameParameter, loginIDParameter, passwordParameter, userroleParameter, phoneNoParameter, faxNoParameter, companynameParameter, designationParameter, departmentParameter, emailIDParameter, userStatusParameter);
        }
    
        public virtual ObjectResult<CheckUserForLogin_Result> CheckUserForLogin(string loginID, string password, ObjectParameter userStatus)
        {
            var loginIDParameter = loginID != null ?
                new ObjectParameter("LoginID", loginID) :
                new ObjectParameter("LoginID", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CheckUserForLogin_Result>("CheckUserForLogin", loginIDParameter, passwordParameter, userStatus);
        }
    
        public virtual int DeletePlant(string plantID)
        {
            var plantIDParameter = plantID != null ?
                new ObjectParameter("PlantID", plantID) :
                new ObjectParameter("PlantID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeletePlant", plantIDParameter);
        }
    
        public virtual ObjectResult<GetPlant_Result> GetPlant(string plantID)
        {
            var plantIDParameter = plantID != null ?
                new ObjectParameter("PlantID", plantID) :
                new ObjectParameter("PlantID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPlant_Result>("GetPlant", plantIDParameter);
        }
    
        public virtual ObjectResult<getUserDetail_Result> getUserDetail(string userID)
        {
            var userIDParameter = userID != null ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getUserDetail_Result>("getUserDetail", userIDParameter);
        }
    
        public virtual int UpdatePlant(string userID, string plantID, string plantName, string address, string contactNo, string faxNo, string website, string plantDetail, Nullable<int> nOfArea, string userRole)
        {
            var userIDParameter = userID != null ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(string));
    
            var plantIDParameter = plantID != null ?
                new ObjectParameter("PlantID", plantID) :
                new ObjectParameter("PlantID", typeof(string));
    
            var plantNameParameter = plantName != null ?
                new ObjectParameter("PlantName", plantName) :
                new ObjectParameter("PlantName", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var contactNoParameter = contactNo != null ?
                new ObjectParameter("ContactNo", contactNo) :
                new ObjectParameter("ContactNo", typeof(string));
    
            var faxNoParameter = faxNo != null ?
                new ObjectParameter("FaxNo", faxNo) :
                new ObjectParameter("FaxNo", typeof(string));
    
            var websiteParameter = website != null ?
                new ObjectParameter("Website", website) :
                new ObjectParameter("Website", typeof(string));
    
            var plantDetailParameter = plantDetail != null ?
                new ObjectParameter("PlantDetail", plantDetail) :
                new ObjectParameter("PlantDetail", typeof(string));
    
            var nOfAreaParameter = nOfArea.HasValue ?
                new ObjectParameter("NOfArea", nOfArea) :
                new ObjectParameter("NOfArea", typeof(int));
    
            var userRoleParameter = userRole != null ?
                new ObjectParameter("UserRole", userRole) :
                new ObjectParameter("UserRole", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdatePlant", userIDParameter, plantIDParameter, plantNameParameter, addressParameter, contactNoParameter, faxNoParameter, websiteParameter, plantDetailParameter, nOfAreaParameter, userRoleParameter);
        }
    
        public virtual int updateUserProfile(string userID, string firstName, string lastName, string middleName, string userrole, string phoneNo, string faxNo, string companyname, string designation, string department, string emailID, Nullable<bool> userStatus)
        {
            var userIDParameter = userID != null ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var middleNameParameter = middleName != null ?
                new ObjectParameter("MiddleName", middleName) :
                new ObjectParameter("MiddleName", typeof(string));
    
            var userroleParameter = userrole != null ?
                new ObjectParameter("Userrole", userrole) :
                new ObjectParameter("Userrole", typeof(string));
    
            var phoneNoParameter = phoneNo != null ?
                new ObjectParameter("PhoneNo", phoneNo) :
                new ObjectParameter("PhoneNo", typeof(string));
    
            var faxNoParameter = faxNo != null ?
                new ObjectParameter("FaxNo", faxNo) :
                new ObjectParameter("FaxNo", typeof(string));
    
            var companynameParameter = companyname != null ?
                new ObjectParameter("Companyname", companyname) :
                new ObjectParameter("Companyname", typeof(string));
    
            var designationParameter = designation != null ?
                new ObjectParameter("Designation", designation) :
                new ObjectParameter("Designation", typeof(string));
    
            var departmentParameter = department != null ?
                new ObjectParameter("Department", department) :
                new ObjectParameter("Department", typeof(string));
    
            var emailIDParameter = emailID != null ?
                new ObjectParameter("EmailID", emailID) :
                new ObjectParameter("EmailID", typeof(string));
    
            var userStatusParameter = userStatus.HasValue ?
                new ObjectParameter("UserStatus", userStatus) :
                new ObjectParameter("UserStatus", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("updateUserProfile", userIDParameter, firstNameParameter, lastNameParameter, middleNameParameter, userroleParameter, phoneNoParameter, faxNoParameter, companynameParameter, designationParameter, departmentParameter, emailIDParameter, userStatusParameter);
        }
    
        public virtual int DeleteNode(string plantID, string levelID)
        {
            var plantIDParameter = plantID != null ?
                new ObjectParameter("PlantID", plantID) :
                new ObjectParameter("PlantID", typeof(string));
    
            var levelIDParameter = levelID != null ?
                new ObjectParameter("LevelID", levelID) :
                new ObjectParameter("LevelID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteNode", plantIDParameter, levelIDParameter);
        }
    
        public virtual ObjectResult<GetAllPlantDetail_Result1> GetAllPlantDetail(string userID)
        {
            var userIDParameter = userID != null ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllPlantDetail_Result1>("GetAllPlantDetail", userIDParameter);
        }
    
        public virtual ObjectResult<GetArea_Result> GetArea(string areaID)
        {
            var areaIDParameter = areaID != null ?
                new ObjectParameter("AreaID", areaID) :
                new ObjectParameter("AreaID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetArea_Result>("GetArea", areaIDParameter);
        }
    
        public virtual ObjectResult<GetMachine_Result> GetMachine(string machineID)
        {
            var machineIDParameter = machineID != null ?
                new ObjectParameter("MachineID", machineID) :
                new ObjectParameter("MachineID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetMachine_Result>("GetMachine", machineIDParameter);
        }
    
        public virtual ObjectResult<GetPoint_Result> GetPoint(string pointID)
        {
            var pointIDParameter = pointID != null ?
                new ObjectParameter("PointID", pointID) :
                new ObjectParameter("PointID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPoint_Result>("GetPoint", pointIDParameter);
        }
    
        public virtual ObjectResult<GetTrain_Result> GetTrain(string trainID)
        {
            var trainIDParameter = trainID != null ?
                new ObjectParameter("TrainID", trainID) :
                new ObjectParameter("TrainID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTrain_Result>("GetTrain", trainIDParameter);
        }
    
        public virtual ObjectResult<GetAreaByPlantID_Result> GetAreaByPlantID(string plantID)
        {
            var plantIDParameter = plantID != null ?
                new ObjectParameter("PlantID", plantID) :
                new ObjectParameter("PlantID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAreaByPlantID_Result>("GetAreaByPlantID", plantIDParameter);
        }
    
        public virtual ObjectResult<GetMachineByTrainID_Result> GetMachineByTrainID(string trainID)
        {
            var trainIDParameter = trainID != null ?
                new ObjectParameter("TrainID", trainID) :
                new ObjectParameter("TrainID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetMachineByTrainID_Result>("GetMachineByTrainID", trainIDParameter);
        }
    
        public virtual ObjectResult<GetPointByMachineID_Result> GetPointByMachineID(string machineID)
        {
            var machineIDParameter = machineID != null ?
                new ObjectParameter("MachineID", machineID) :
                new ObjectParameter("MachineID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPointByMachineID_Result>("GetPointByMachineID", machineIDParameter);
        }
    
        public virtual int GetSensorAverageOverallValue(string sensorID)
        {
            var sensorIDParameter = sensorID != null ?
                new ObjectParameter("SensorID", sensorID) :
                new ObjectParameter("SensorID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetSensorAverageOverallValue", sensorIDParameter);
        }
    
        public virtual ObjectResult<GetSensorByPointID_Result> GetSensorByPointID(string pointID)
        {
            var pointIDParameter = pointID != null ?
                new ObjectParameter("PointID", pointID) :
                new ObjectParameter("PointID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSensorByPointID_Result>("GetSensorByPointID", pointIDParameter);
        }
    
        public virtual ObjectResult<GetTrainByAreaID_Result> GetTrainByAreaID(string areaID)
        {
            var areaIDParameter = areaID != null ?
                new ObjectParameter("AreaID", areaID) :
                new ObjectParameter("AreaID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTrainByAreaID_Result>("GetTrainByAreaID", areaIDParameter);
        }
    
        public virtual ObjectResult<GetAlarmData_Result> GetAlarmData(Nullable<int> alarmID)
        {
            var alarmIDParameter = alarmID.HasValue ?
                new ObjectParameter("AlarmID", alarmID) :
                new ObjectParameter("AlarmID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAlarmData_Result>("GetAlarmData", alarmIDParameter);
        }
    
        public virtual ObjectResult<GetAllSensorsByAreaID_Result> GetAllSensorsByAreaID(string areaID)
        {
            var areaIDParameter = areaID != null ?
                new ObjectParameter("AreaID", areaID) :
                new ObjectParameter("AreaID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllSensorsByAreaID_Result>("GetAllSensorsByAreaID", areaIDParameter);
        }
    
        public virtual int GetSensorAverageOverallValues(string sensorID)
        {
            var sensorIDParameter = sensorID != null ?
                new ObjectParameter("SensorID", sensorID) :
                new ObjectParameter("SensorID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetSensorAverageOverallValues", sensorIDParameter);
        }
    
        public virtual int GetAlarmIDForSensor(string sensorID, ObjectParameter alarmid)
        {
            var sensorIDParameter = sensorID != null ?
                new ObjectParameter("SensorID", sensorID) :
                new ObjectParameter("SensorID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetAlarmIDForSensor", sensorIDParameter, alarmid);
        }
    
        public virtual ObjectResult<tblRecordData> GetSensorAverageOverallValueNew(string sensorID)
        {
            var sensorIDParameter = sensorID != null ?
                new ObjectParameter("SensorID", sensorID) :
                new ObjectParameter("SensorID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tblRecordData>("GetSensorAverageOverallValueNew", sensorIDParameter);
        }
    
        public virtual ObjectResult<tblRecordData> GetSensorAverageOverallValueNew(string sensorID, MergeOption mergeOption)
        {
            var sensorIDParameter = sensorID != null ?
                new ObjectParameter("SensorID", sensorID) :
                new ObjectParameter("SensorID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<tblRecordData>("GetSensorAverageOverallValueNew", mergeOption, sensorIDParameter);
        }
    
        public virtual ObjectResult<GetAllSensorsByTrainID_Result> GetAllSensorsByTrainID(string trainID)
        {
            var trainIDParameter = trainID != null ?
                new ObjectParameter("TrainID", trainID) :
                new ObjectParameter("TrainID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllSensorsByTrainID_Result>("GetAllSensorsByTrainID", trainIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> GetAlarmIDForSensorNew(string sensorID)
        {
            var sensorIDParameter = sensorID != null ?
                new ObjectParameter("SensorID", sensorID) :
                new ObjectParameter("SensorID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetAlarmIDForSensorNew", sensorIDParameter);
        }
    
        public virtual ObjectResult<GetSensorAvgOverallValueNew_Result> GetSensorAvgOverallValueNew(string sensorID)
        {
            var sensorIDParameter = sensorID != null ?
                new ObjectParameter("SensorID", sensorID) :
                new ObjectParameter("SensorID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSensorAvgOverallValueNew_Result>("GetSensorAvgOverallValueNew", sensorIDParameter);
        }
    
        public virtual ObjectResult<GetAllSensorsByMachineID_Result> GetAllSensorsByMachineID(string machineID)
        {
            var machineIDParameter = machineID != null ?
                new ObjectParameter("MachineID", machineID) :
                new ObjectParameter("MachineID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllSensorsByMachineID_Result>("GetAllSensorsByMachineID", machineIDParameter);
        }
    
        public virtual ObjectResult<GetSensorAvgOverallValueForArea_Result> GetSensorAvgOverallValueForArea(string sensorID)
        {
            var sensorIDParameter = sensorID != null ?
                new ObjectParameter("SensorID", sensorID) :
                new ObjectParameter("SensorID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSensorAvgOverallValueForArea_Result>("GetSensorAvgOverallValueForArea", sensorIDParameter);
        }
    
        public virtual ObjectResult<GetSensorAvgOverallValueForMachine_Result> GetSensorAvgOverallValueForMachine(string sensorID)
        {
            var sensorIDParameter = sensorID != null ?
                new ObjectParameter("SensorID", sensorID) :
                new ObjectParameter("SensorID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSensorAvgOverallValueForMachine_Result>("GetSensorAvgOverallValueForMachine", sensorIDParameter);
        }
    
        public virtual ObjectResult<GetSensorAvgOverallValueForPoint_Result> GetSensorAvgOverallValueForPoint(string sensorID)
        {
            var sensorIDParameter = sensorID != null ?
                new ObjectParameter("SensorID", sensorID) :
                new ObjectParameter("SensorID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSensorAvgOverallValueForPoint_Result>("GetSensorAvgOverallValueForPoint", sensorIDParameter);
        }
    
        public virtual ObjectResult<GetSensorAvgOverallValueForTrain_Result> GetSensorAvgOverallValueForTrain(string sensorID)
        {
            var sensorIDParameter = sensorID != null ?
                new ObjectParameter("SensorID", sensorID) :
                new ObjectParameter("SensorID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSensorAvgOverallValueForTrain_Result>("GetSensorAvgOverallValueForTrain", sensorIDParameter);
        }
    
        public virtual ObjectResult<GetAllSensorsByPointID_Result> GetAllSensorsByPointID(string pointID)
        {
            var pointIDParameter = pointID != null ?
                new ObjectParameter("PointID", pointID) :
                new ObjectParameter("PointID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllSensorsByPointID_Result>("GetAllSensorsByPointID", pointIDParameter);
        }
    
        public virtual ObjectResult<GetRecordedDataBuSensorID_Result> GetRecordedDataBuSensorID(string sensorID)
        {
            var sensorIDParameter = sensorID != null ?
                new ObjectParameter("SensorID", sensorID) :
                new ObjectParameter("SensorID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetRecordedDataBuSensorID_Result>("GetRecordedDataBuSensorID", sensorIDParameter);
        }
    
        public virtual ObjectResult<GetAllSensorsByPointIDNew_Result> GetAllSensorsByPointIDNew(string pointID)
        {
            var pointIDParameter = pointID != null ?
                new ObjectParameter("PointID", pointID) :
                new ObjectParameter("PointID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllSensorsByPointIDNew_Result>("GetAllSensorsByPointIDNew", pointIDParameter);
        }
    
        public virtual int ResetCurrentPassword(string userID, string currentPassword, string newPassword)
        {
            var userIDParameter = userID != null ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(string));
    
            var currentPasswordParameter = currentPassword != null ?
                new ObjectParameter("CurrentPassword", currentPassword) :
                new ObjectParameter("CurrentPassword", typeof(string));
    
            var newPasswordParameter = newPassword != null ?
                new ObjectParameter("NewPassword", newPassword) :
                new ObjectParameter("NewPassword", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ResetCurrentPassword", userIDParameter, currentPasswordParameter, newPasswordParameter);
        }
    
        public virtual ObjectResult<GetRecordDataByTime_Result> GetRecordDataByTime(string pointID, Nullable<System.DateTime> recordTIme)
        {
            var pointIDParameter = pointID != null ?
                new ObjectParameter("PointID", pointID) :
                new ObjectParameter("PointID", typeof(string));
    
            var recordTImeParameter = recordTIme.HasValue ?
                new ObjectParameter("RecordTIme", recordTIme) :
                new ObjectParameter("RecordTIme", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetRecordDataByTime_Result>("GetRecordDataByTime", pointIDParameter, recordTImeParameter);
        }
    
        public virtual ObjectResult<Nullable<System.DateTime>> GetRecordTime(string pointID)
        {
            var pointIDParameter = pointID != null ?
                new ObjectParameter("PointID", pointID) :
                new ObjectParameter("PointID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<System.DateTime>>("GetRecordTime", pointIDParameter);
        }
    
        public virtual ObjectResult<GetRecordedDataByPointID_Result> GetRecordedDataByPointID(string pointID)
        {
            var pointIDParameter = pointID != null ?
                new ObjectParameter("PointID", pointID) :
                new ObjectParameter("PointID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetRecordedDataByPointID_Result>("GetRecordedDataByPointID", pointIDParameter);
        }
    
        public virtual ObjectResult<GetRecordedTimeByPointID_Result> GetRecordedTimeByPointID(string pointID)
        {
            var pointIDParameter = pointID != null ?
                new ObjectParameter("PointID", pointID) :
                new ObjectParameter("PointID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetRecordedTimeByPointID_Result>("GetRecordedTimeByPointID", pointIDParameter);
        }
    
        public virtual ObjectResult<GetOverallByRecordID_Result> GetOverallByRecordID(Nullable<int> recordID, string parentID)
        {
            var recordIDParameter = recordID.HasValue ?
                new ObjectParameter("recordID", recordID) :
                new ObjectParameter("recordID", typeof(int));
    
            var parentIDParameter = parentID != null ?
                new ObjectParameter("ParentID", parentID) :
                new ObjectParameter("ParentID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetOverallByRecordID_Result>("GetOverallByRecordID", recordIDParameter, parentIDParameter);
        }
    }
}
